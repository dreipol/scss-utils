@use './index' as utils;

.test {
    $test-list: (foo, bar, baz);
    $test-map: (foo: bar);
    $test-color: #0000ff;

    // Prefixed mixins
    @include utils.has-focus;
    @include utils.at-root('.test');
    @include utils.hide-text;
    @include utils.hide-visually;
    @include utils.ios-native-scrolling;
    @include utils.is-selectable(true);
    @include utils.is-visible(true, 200);
    @include utils.last-row(2);
    @include utils.overlay;
    @include utils.placeholder;
    @include utils.size(200);
    @include utils.text-ellipsis;
    @include utils.supports-hover;
    @include utils.supports-touch;

    // Prefixed functions
    $methods: (
        't-1': utils.color-shade($test-color, 10),
        't-2': utils.color-tint($test-color, 10),
        't-3': utils.is-truthy('foo'),
        't-4': utils.list-concat($test-list, ','),
        't-5': utils.list-contains($test-list, foo),
        't-6': utils.list-expand-directions($test-list),
        't-7': utils.list-first($test-list),
        't-8': utils.list-insert-nth($test-list, 2, qux),
        't-9': utils.list-last($test-list),
        't-10': utils.list-last-index($test-list, bar),
        't-11': utils.list-prepend($test-list, qux),
        't-12': utils.list-purge($test-list),
        't-13': utils.list-remove($test-list, foo),
        't-14': utils.list-remove-nth($test-list, 1),
        't-15': utils.list-replace($test-list, foo, qux),
        't-16': utils.list-replace-nth($test-list, 1, qux),
        't-17': utils.list-slice($test-list, 2, 3),
        't-18': utils.map-assign($test-map),
        't-19': utils.map-deep-get($test-map, 'color'),
        't-20': utils.selector-get-element-name('.test'),
        't-21': utils.str-replace('test', 'st', 'oo'),
        't-22': utils.str-split('test'),
        't-23': utils.strip-unit(3),
        't-24': utils.to-string(foo),
        't-25': utils.transition-props('all 300ms linear'),
    );

    $test-expected: (
        't-1': #0000e6,
        't-2': #1a1aff,
        't-3': true,
        't-4': 'foo,bar,baz',
        't-5': true,
        't-6': (foo, bar, baz, bar),
        't-7': 'foo',
        't-8': foo qux bar baz,
        't-9': 'baz',
        't-10': 2,
        't-11': (qux, foo, bar, baz),
        't-12': foo bar baz,
        't-13': bar baz,
        't-14': bar baz,
        't-15': qux bar baz,
        't-16': qux bar baz,
        't-17': bar baz,
        't-18': (foo: bar),
        't-19': null,
        't-20': 'test',
        't-21': 'teoo',
        't-22': 't' 'e' 's' 't',
        't-23': 3,
        't-24': 'foo',
        't-25': (),
    );

    @for $i from 1 through length($test-expected) {
        $expected: map-get($test-expected, 't-#{$i}');
        $result: map-get($methods, 't-#{$i}');

        @if $result != $expected {
            @error 'Test ##{$i} failing! - "#{$result}" != "#{$expected}"';
        }
    }
}
